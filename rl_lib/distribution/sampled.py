"""
Distributions defined by sampling functions.
"""

import numpy as np
from typing import Callable, TypeVar, Generic

from rl_lib.distribution.base import Distribution

# Type variable for distribution outcomes
T = TypeVar('T')

class SampledDistribution(Distribution[T]):
    """
    A distribution defined by a sampling function.
    
    This class represents a probability distribution that is defined by a function
    that generates random samples. Expectations are approximated by averaging over
    multiple samples.
    """
    
    def __init__(self, sampler: Callable[[], T], expectation_samples: int = 1000):
        """
        Initialize a sampled distribution.
        
        Args:
            sampler: Function that returns a sample when called
            expectation_samples: Number of samples to use for expectation approximation
        """
        self.sampler = sampler
        self.expectation_samples = expectation_samples
    
    def sample(self) -> T:
        """
        Return a random sample from this distribution.
        
        Returns:
            A random outcome generated by the sampler function
        """
        return self.sampler()
    
    def expectation(self, f: Callable[[T], float]) -> float:
        """
        Approximate expectation by averaging over samples.
        
        Args:
            f: Function to apply to each outcome
            
        Returns:
            Approximated expected value of f(X)
        """
        total = 0.0
        for _ in range(self.expectation_samples):
            sample = self.sample()
            total += f(sample)
        return total / self.expectation_samples


class Gaussian(SampledDistribution[float]):
    """
    Gaussian (normal) distribution with given mean and standard deviation.
    
    This class represents a normal distribution with specified parameters.
    It is implemented as a sampled distribution using NumPy's random number generator.
    """
    
    def __init__(self, μ: float, σ: float, expectation_samples: int = 1000):
        """
        Initialize a Gaussian distribution.
        
        Args:
            μ: Mean of the distribution
            σ: Standard deviation of the distribution
            expectation_samples: Number of samples for expectation approximation
        """
        self.μ = μ
        self.σ = σ
        super().__init__(
            sampler=lambda: np.random.normal(loc=self.μ, scale=self.σ),
            expectation_samples=expectation_samples
        )
    
    def __repr__(self) -> str:
        """
        Return a string representation of the distribution.
        
        Returns:
            String representation
        """
        return f"Gaussian(μ={self.μ}, σ={self.σ})"
